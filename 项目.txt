用户名188****5722

密码930715

Xiaomeng123

1.网站的入口是url 它对应controller注解过的类里的处理函数
2、url参数解析  路径里的参数用注解@PathVariable 请求里的参数用@RequestParam
3.通过模板进行渲染 $!{变量} !作用如果变量不存在 强制为空  无！当成文本去解析  模板中单引号不解析
4.Model 为了将参数传递给模板  
5.@CookieValue  @ExceptionHandler
6.IOC @Autowired  无需关注变量初始化，通过注解方式   
AOP @Aspect @Component该注解用于依赖注入   @Before @After 面向纵向的
拦截器  留出一些接口给后端，后续开发  

通过controller的定义说明是一个网页的入口，首先指定网页的访问地址，对地址中的参数，request的参数进行解析，两种返回方式  返回字符串或模板

Mybatis 注解、XML
定义DAO接口，用@Mapper: DAO和数据库做映射  用注解方式将增删改查写进去  利用依赖注入方式可以直接拿来用

登录、注册、浏览（用户登录之后，服务器怎么知道他登录了。有些人登录状态有些人看到未登录状态，服务器怎么去鉴别的）拦截器（用它来识别有些登录有些未登录）未登录跳转（一定要登录）数据安全性

登录：先验证用户、密码；成功后服务器生成一个token与userid关联；客户端存储，

访问所有页面都要对cookie里的token进行验证   可以用切面  也可以用拦截器
拦截器：设置预留接口，是个回调接口，思想：在原有的业务上留出接口，后续扩展。 preHandle在走controller之前  postHandle渲染之前   两种拦截器：1.用ticket判断用户是谁（先取t票判断是否有效，有效说明用户有效，取信息。获得用户要把用户放到上下文使得其他controller、service都可以访问->依赖注入；ThreadLocal:看起来是一个变量，但变量的每个线程都有一个拷贝，可以通过公共的接口来访问，Map<ThreadId, User>。 有多个线程访问页面，又都是登录用户，要给每个用户处理请求，不能有一个公共的，否则就乱了，不知道用户是给哪个线程的，所以每个线程有自己的变量）， modelAndView.addObject("user",hostHolder.getUser());渲染之前将user加入velocity上下文，在velocity中可直接访问。拦截器配置到webserver里，spring在初始化的时候会把拦截器回调，注册自己的拦截器

2.这个人有没有权限访问

未登录跳转：没登录就跳转到一个页面，拦截器，判断用户（上一个拦截器写进去的）有没有，